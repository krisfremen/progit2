[[_first_time]]
=== First-Time Git Setup

Сега кога имате Git на вашиот систем, ќе сакате да направите неколку работи за да ја прилагодите вашата околина Git.
Треба да треба да ги правите овие работи само еднаш на било кој компјутер; тие ќе се држат околу помеѓу надградбите.
Можете исто така да ги промените во секое време со повторно извршување на командите.

Git доаѓа со алатка наречена `git config` што ви овозможува да добиете и да поставите конфигурациски променливи кои ги контролираат сите аспекти на тоа како Git изгледа и работи.(((git commands, config)))

Овие променливи можат да се складираат на три различни места:

1. `/ etc / gitconfig` file: Содржи вредности кои се применуваат на секој корисник на системот и сите нивни складишта.
    Ако ја пренесете опцијата `--system` во` git config`, таа чита и пишува од оваа датотека посебно.
    )Бидејќи ова е системска конфигурациска датотека, ќе ви треба административна или надзорна привилегија за да направите промени во неа.)
2. `~ / .gitconfig` или` ~ / .config / git / config` датотека: Вредности кои се специфични за вас, корисникот.
    Можете да го направите Git да чита и пишува во оваа датотека специјално со донесување на опцијата `--global`.
3. `config` датотека во Git директориумот (т.е.` .git / config`) на она што складиштето што го користите во моментов: Специфично за тоа едно складиште.

Секое ниво ги надминува вредностите на претходното ниво, па вредностите во `.git / config` ги адут оние во` / etc / gitconfig`.

Во Windows системите, Git ја бара датотеката `.gitconfig` во директориумот` $ HOME` (`C: \ Users \ $ USER`) за повеќето луѓе.
Таа, исто така, се уште бара "/ etc / gitconfig", иако е релативна на коренот MSys, кој е каде и да одлучите да го инсталирате Git на вашиот Windows систем кога го стартувате инсталаторот.
Ако користите верзија 2.x или подоцна на Git за Windows, исто така има и конфигурациска датотека на системско ниво
`C: \ Documents and Settings \ All Users \ Application Data \ Git \ config` во Windows XP и во` C: \ ProgramData \ Git \ config` на Windows Vista и понова.
Оваа конфигурациска датотека може да се промени само со `git config -f <датотека>` како администратор.

==== Вашиот идентитет

Првото нешто што треба да го направите кога го инсталирате Git е да го поставите вашето корисничко име и е-адреса.
Ова е важно бидејќи секој Git commit ја користи оваа информација и е непроменливо печен во обврските што ги започнувате да создавате:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Повторно, ова треба да го направите само еднаш ако ја поминате опцијата `--global`, бидејќи тогаш Git секогаш ќе ги користи тие информации за она што го правите на тој систем.
Ако сакате да го отфрлите ова со друго име или адреса за е-пошта за конкретни проекти, можете да ја извршите командата без `--global` опцијата кога сте во тој проект.

Многу од алатките GUI ќе ви помогнат да го направите ова кога прво ќе ги извршите.

==== Вашиот уредник

Сега кога вашиот идентитет е поставен, можете да го конфигурирате стандардниот уредувач на текст што ќе се користи кога Git ќе треба да напишете порака.
Ако не е конфигуриран, Git користи стандарден уредувач на вашиот систем.

Ако сакате да користите друг уредувач на текст, како што е Emacs, можете да го направите следново:

[source,console]
----
$ git config --global core.editor emacs
----

Во системот на Windows, ако сакате да користите друг уредувач на текст, мора да ја наведете целосната патека до неговата извршна датотека.
Ова може да биде различно во зависност од тоа како уредувачот е спакуван.

Во случај на Notepad ++, популарен уредувач на програмирање, најверојатно ќе сакате да ја користите 32-битната верзија, бидејќи во моментот на пишувањето 64-битната верзија не ги поддржува сите приклучоци.
Ако сте на 32-битен систем на Windows или имате 64-битен уредувач на 64-битен систем, ќе напишете нешто слично:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

Ако имате 32-битен уредувач на 64-битен систем, програмата ќе биде инсталирана во `C: \ Program Files (x86)`:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs и Notepad ++ се популарни уредувачи на текст кои често ги користат развивачите на Unix-базирани системи како Linux и MacOS или систем Windows.
Ако не сте запознаени со овие уредници, можеби ќе треба да барате конкретни упатства за тоа како да го поставите вашиот омилен уредувач со Git.
====

[WARNING]
====
Може да се најде, ако не го поставите вашиот уредник вака, ќе влезете во навистина збунувачка состојба кога Git ќе се обиде да го стартува.
Пример за систем на Windows може да вклучи прерано прекинат операција Git за време на уредувањето иницирано со Git.
====

==== Checking Your Settings

Ако сакате да ги проверите вашите конфигурациски поставки, можете да ја користите командата `git config - list` за да ги наведете сите поставки Git може да најде во таа точка:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Може да ги видите копчињата повеќе од еднаш, бидејќи Git го чита истиот клуч од различни датотеки (на пример, "/ etc / gitconfig" и "~ /. Gitconfig", на пример).
Во овој случај, Git ја користи последната вредност за секој уникатен клуч што го гледа.

Можете исто така да проверите што Git мисли за вредноста на специфичниот клуч е со внесување на `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Бидејќи Git може да ја прочита истата вредност на конфигурациската променлива од повеќе од една датотека, можно е дека имате неочекувана вредност за една од овие вредности и не знаете зошто.
Во такви случаи, можете да го побарате Git како _origin_ за таа вредност, и ќе ви каже која конфигурациска датотека го имаше последниот збор во поставувањето на таа вредност:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
